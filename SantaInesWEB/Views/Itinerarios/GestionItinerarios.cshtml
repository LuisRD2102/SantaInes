
@{
    ViewData["Title"] = "Itinerarios";
}

<head>
    <link rel="stylesheet" href="~/css/Calendar.css"/>
    <link rel="stylesheet" href="~/css/Itinerario.css"/>
    <link rel="stylesheet" href="~/css/Scheduler.css"/>
</head>

<div class="top-bar">
    <div class="titulo-top">
        <h2>Itinerarios</h2>
    </div>
</div>

<div class="contenedor">
    <div id="nav" class="calendario"></div>

    @*El input mantiene funcional el calendario (No Borrar)*@
    <input type="radio" style="display:none" value="hours" name="scale" id='scale-hours' checked>
    
    <div class="contenedor-calendario">
        <div id="scheduler"></div>
    </div>
    

</div>




<script src="~/lib/daypilot/daypilot-all.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<script>

    const app = {

        elements: {
            get businessOnly() { return document.querySelector("#business-only"); },
            get radios() { return Array.apply(null, document.querySelectorAll("input[name=scale]")); },
            get clear() { return document.querySelector("#clear"); },
            get scaleChecked() { return document.querySelector("input[name=scale]:checked"); }
        },
        async loadEvents(day) {
            let from = scheduler.visibleStart();
            let to = scheduler.visibleEnd();
            if (day) {
                from = new DayPilot.Date(day).firstDayOfMonth();
                to = from.addMonths(1);
            }

            const { data } = await DayPilot.Http.get(`https://localhost:7270/Citas/Doctor/?start=${from}&end=${to}`);
            data.forEach(item => item.text=null)
            const options = {
                events: data
            };

            if (day) {
                options.timeline = app.getTimeline(day);
                options.scrollTo = day;
            }

            scheduler.update(options);

            nav.events.list = data;
            nav.update();
        },
        async loadResources() {
            const { data } = await DayPilot.Http.get("https://localhost:7270/Empleado/Doctores");
            scheduler.update({
                resources: data,
                visible: true
            });
        },
        getTimeline(date) {
            date = date || DayPilot.Date.today();
            const start = new DayPilot.Date(date).firstDayOfMonth();
            const days = start.daysInMonth();
            const scale = app.elements.scaleChecked.value;

            let morningShiftStarts = 7;
            let morningShiftEnds = 13;
            let afternoonShiftStarts = 13;
            let afternoonShiftEnds = 21;

            const timeline = [];

            let increaseMorning;  // in hours
            let increaseAfternoon;  // in hours
            switch (scale) {
                case "15min":
                    increaseMorning = 0.25;
                    increaseAfternoon = 0.25;
                    break;
                case "hours":
                    increaseMorning = 1;
                    increaseAfternoon = 1;
                    break;
                case "shifts":
                    increaseMorning = morningShiftEnds - morningShiftStarts;
                    increaseAfternoon = afternoonShiftEnds - afternoonShiftStarts;
                    break;
                default:
                    throw "Invalid scale value";
            }

            for (let i = 0; i < days; i++) {
                const day = start.addDays(i);

                for (let x = morningShiftStarts; x < morningShiftEnds; x += increaseMorning) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseMorning) });
                }
                for (let x = afternoonShiftStarts; x < afternoonShiftEnds; x += increaseAfternoon) {
                    timeline.push({ start: day.addHours(x), end: day.addHours(x + increaseAfternoon) });
                }
            }

            return timeline;
        },
        getTimeHeaders() {
            const scale = app.elements.scaleChecked.value;
            switch (scale) {
                case "15min":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Hour", format: "h tt" },
                        { groupBy: "Cell", format: "m" }
                    ];
                case "hours":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Hour", format: "h tt" }
                    ];
                case "shifts":
                    return [
                        { groupBy: "Month" },
                        { groupBy: "Day", format: "dddd d" },
                        { groupBy: "Cell", format: "tt" }
                    ];
            }
        },
        init() {
            app.loadResources();
            app.loadEvents(DayPilot.Date.today());

            app.elements.radios.forEach(item => {
                item.addEventListener("change", () => {
                    scheduler.timeline = app.getTimeline();
                    scheduler.timeHeaders = app.getTimeHeaders();
                    scheduler.update();
                });
            });
        }

    };


    const nav = new DayPilot.Navigator("nav", {
        selectMode: "week",
        showMonths: 6,
        skipMonths: 3,
        locale: "es-mx",
        onTimeRangeSelected: args => {
            if (scheduler.visibleStart().getDatePart() <= args.day && args.day < scheduler.visibleEnd()) {
                scheduler.scrollTo(args.day, "fast");  // just scroll
            } else {
                app.loadEvents(args.day);  // reload and scroll
            }
        }
    });
    nav.init();


    const scheduler = new DayPilot.Scheduler("scheduler", {
        visible: false, // will be displayed after loading the resources
        scale: "Manual",
        timeline: app.getTimeline(),
        timeHeaders: app.getTimeHeaders(),
        useEventBoxes: "Never",
        locale: "es-mx",
        eventDeleteHandling: "Update",
        eventClickHandling: "Disabled",
        eventMoveHandling: "Disabled",
        eventResizeHandling: "Disabled",
        allowEventOverlap: false,
        onBeforeTimeHeaderRender: (args) => {
            args.header.text = args.header.text.replace(" AM", " am").replace(" PM", " pm");  // shorten the hour header
        },
        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "Libre":
                    args.data.backColor = "#0096FF";  //azul
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.deleteDisabled = app.elements.scaleChecked.value === "shifts"; // only allow deleting in the more detailed hour scale mode
                    break;
                case "En espera":
                    args.data.backColor = "#ff6a00";  //naranja
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    break;
                case "Confirmada":
                    args.data.backColor = "#74b71b";  // verde
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    break;
            }
        },
        onEventDeleted: async (args) => {
            const params = {
                id: args.e.id(),
            };
            const { data: result } = await DayPilot.Http.delete(`https://localhost:7270/Citas/EliminarCita/${params.id}`);
        },
        onTimeRangeSelected: async (args) => {
            const dp = scheduler;
            const scale = app.elements.scaleChecked.value;

            const params = {
                start: args.start.toString(),
                end: args.end.toString(),
                resource: args.resource,
                scale: scale
            };

            dp.clearSelection();
            const { data } = await DayPilot.Http.post("https://localhost:7270/Citas/create", params);
            app.loadEvents();
        }
    });

    scheduler.heightSpec = 'Parent100Pct';
    scheduler.roundedCorners = true;
    scheduler.init();

    app.init();

</script>