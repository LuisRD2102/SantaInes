@{
    ViewData["Title"] = "Gestion de citas";
}

<head>
    <link rel="stylesheet" href="~/css/Calendar.css" />
    <link rel="stylesheet" href="~/css/Modal.css" />
    <link rel="stylesheet" href="~/css/Itinerario.css" />
    <link rel="stylesheet" href="~/css/Calendar-Citas.css" />
    <link rel="stylesheet" href="~/css/Scheduler.css" />
</head>

<script src="~/lib/daypilot/daypilot-all.min.js"></script>

<div class="top-bar">
    <div class="titulo-top">
        <h2>Citas pendientes</h2>
    </div>
</div>

<div class="contenedor">
    <div class="column-left">
        <div id="nav"></div>
    </div>
    <div class="column-main">
        <div class="titulo-citas-pendientes">
            <h1>Disponibilidad</h1>        
            <div class="space">
                <select class="form-select" id="doctor" name="doctor" style="@(Context.Session.GetString("rol") == "Doctor" ? "display:none" : "")"></select>
            </div>
        </div>
        <div class="contenedor-calendario">
            <div id="calendar"></div>
        </div>
    </div>
</div>

<script>
    const app = {
        doctors: [],
        elements: {
            doctor: document.querySelector("#doctor")
        },
        async loadEvents(day) {      
            const start = nav.visibleStart();
            const end = nav.visibleEnd();
            const doctor = "@Context.Session.GetString("rol")" == "Doctor" ? "@Context.Session.GetString("username")" : app.elements.doctor.value;

            const { data } = await DayPilot.Http.get(`https://localhost:7270/Citas/Doctor?start=${start}&end=${end}&doctor=${doctor}`);

            if (day) {
                calendar.startDate = day;
            }

            calendar.events.list = data;
            calendar.update();

            nav.events.list = data;
            nav.update();
        },
        async init() {
            const { data } = await DayPilot.Http.get("https://localhost:7270/Empleado/Doctores");

            app.doctors = data;

            app.doctors.forEach(item => {
                const option = document.createElement("option");
                option.value = item.id;
                option.innerText = item.name;
                app.elements.doctor.appendChild(option);
            });

            app.elements.doctor.addEventListener("change", () => {
                app.loadEvents();
            });

            app.loadEvents();
        }
    };

    const nav = new DayPilot.Navigator("nav", {
        selectMode: "week",
        showMonths: 3,
        skipMonths: 3,
        onTimeRangeSelected: (args) => {
            app.loadEvents(args.start.firstDayOfWeek(), args.start.addDays(7));
        }
    });
    nav.init();

    const calendar = new DayPilot.Calendar("calendar", {
        viewType: "Week",
        timeRangeSelectedHandling: "Disabled",
        eventDeleteHandling: "Update",
        onEventMoved: async (args) => {
            const appointment = {
                ...args.e.data,
                start: args.newStart,
                end: args.newEnd
            };
            const { data } = await DayPilot.Http.put(`https://localhost:7270/Citas/ActualizarCita/${appointment.id}`, appointment);
        },
        onEventResized: async (args) => {
            const appointment = {
                ...args.e.data,
                start: args.newStart,
                end: args.newEnd
            };
            const { data } = await DayPilot.Http.put(`https://localhost:7270/Citas/ActualizarCita/${appointment.id}`, appointment);
        },
        onEventDeleted: async (args) => {
            const id = args.e.data.id;
            await DayPilot.Http.delete(`https://localhost:7270/Citas/EliminarCita/${id}`);
        },
        onBeforeEventRender: (args) => {
            switch (args.data.status) {
                case "Libre":
                    args.data.backColor = "#3d85c6";  // blue
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = ``;
                    break;
                case "En espera":
                    args.data.backColor = "#e69138";  // orange
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = ``;
                    break;
                case "Confirmada":
                    args.data.backColor = "#6aa84f";  // green
                    args.data.barHidden = true;
                    args.data.borderColor = "darker";
                    args.data.fontColor = "white";
                    args.data.html = ``;
                    break;
            }
        },
        onEventClick: async (args) => {

            const form = [
                { name: "Editar Cita" },
                {
                    name: "Estado", id: "status", type: "select", options: [
                        { name: "Libre", id: "Libre" },
                        { name: "En espera", id: "En espera" },
                        { name: "Confirmada", id: "Confirmada" },
                    ]
                },
                { name: "Paciente", id: "pacienteNombre", disabled: true },
                { name: "Inicio", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true },
                { name: "Fin", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true },
                { name: "Doctor", id: "resource", disabled: true, options: app.doctors },
            ];

            const data = args.e.data;

            const options = {
                focus: "text"
            };

            const modal = await DayPilot.Modal.form(form, data, options);
            if (modal.canceled) {
                return;
            }

            const params = {
                ...args.e.data,
                name: modal.result.text,
                status: modal.result.status
            };

            await DayPilot.Http.put(`https://localhost:7270/Citas/ActualizarCita/${params.id}`, params);
            calendar.events.update(modal.result);
        }
    });

    //HORAS MOSTRADAS EN EL CALENDARIO
    calendar.dayBeginsHour = 7;
    calendar.dayEndsHour = 21;
    calendar.heightSpec = 'Parent100Pct';

    calendar.bubble = new DayPilot.Bubble({

        onLoad: function (args) {

            var ev = args.source;
            console.log(ev.data.status);

            args.async = true;

            setTimeout(function () {

                switch (ev.data.status) {
                    case "Libre":
                        args.html = ev.data.text;
                        break;
                    case "En espera":
                        args.html = ev.data.text;
                        break;
                    case "Confirmada":
                        args.html = ev.data.text;
                        break;
                }

                args.loaded();

            });

        }

    });

    calendar.init();

    app.init();

</script>