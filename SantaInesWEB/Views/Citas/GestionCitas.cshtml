@{
    ViewData["Title"] = "Citas";
}

<head>
    <link rel="stylesheet" href="~/css/Calendar.css" />
    <link rel="stylesheet" href="~/css/Itinerario.css" />
    <link rel="stylesheet" href="~/css/Calendar-Citas.css" />
    <link rel="stylesheet" href="~/css/Scheduler.css" />
</head>

<script src="~/lib/daypilot/daypilot-all.min.js"></script>

<div class="top-bar">
    <div class="titulo-top">
        <h2>Citas</h2>
    </div>
</div>

<div class="contenedor">
    <div class="column-left">
        <div id="nav"></div>
    </div>
    <div class="column-main">
        <div class="titulo-citas-pendientes">
            <h1>Disponibilidad</h1>
            <div class="space">
                <select class="form-select" id="doctor" name="doctor">
                    <option value="">Todos los doctores</option>
                </select>
                <select class="form-select" id="departamento" name="departamento">
                    <option value="">Todos los departamentos</option>
                </select>
            </div>
        </div>
        <div class="contenedor-calendario">
            <div id="calendar"></div>
        </div>
    </div>
</div>

<script>
const app = {
    doctors: [],
    departamentos: [],
    elements: {
        doctor: document.querySelector("#doctor"),
        departamento: document.querySelector("#departamento")
    },
    
    get patientId() {
            return '@Context.Session.GetString("username")';
    },
    async loadEvents(day) {
        const start = nav.visibleStart() > DayPilot.Date.now() ? nav.visibleStart() : DayPilot.Date.now();
        const end = nav.visibleEnd();
        const patient = app.patientId;
        const doctor = app.elements.doctor.value;
        const departamento = app.elements.departamento.value;

            const { data } = await DayPilot.Http.get(`https://localhost:7270/Citas/Libres?start=${start}&end=${end}&patient=${patient}&doctor=${doctor}&idDepartamento=${departamento}`);
        if (day) {
            calendar.startDate = day;
        }
        calendar.events.list = data;
        calendar.update();

        nav.events.list = data;
        nav.update();
    },
    async init() {

        //Dropdown Doctores
        let { data } = await DayPilot.Http.get("https://localhost:7270/Empleado/Doctores");

        app.doctors = data;

        app.doctors.forEach(item => {
            const option = document.createElement("option");
            option.value = item.id;
            option.innerText = item.name;
            app.elements.doctor.appendChild(option);
        });

        app.elements.doctor.addEventListener("change", () => {
            app.loadEvents();
        });

        //Dropdown departamentos
        data = await DayPilot.Http.get("https://localhost:7270/Departamento/ConsultaDepartamentosDP");
            
        app.departamentos = data.data;
        app.departamentos.forEach(item => {
            const option = document.createElement("option");
            option.value = item.id;
            option.innerText = item.nombre;
            app.elements.departamento.appendChild(option);
        });

        app.elements.departamento.addEventListener("change", () => {
            app.loadEvents();
        });

        //Cargar eventos
        app.loadEvents();
    }
};

const nav = new DayPilot.Navigator("nav", {
    selectMode: "week",
    showMonths: 3,
    locale:"es-mx",
    skipMonths: 3,
    onTimeRangeSelected: (args) => {
        const weekStarts = DayPilot.Locale.find(nav.locale).weekStarts;
        const start = args.start.firstDayOfWeek(weekStarts);
        const end = args.start.addDays(7);
        app.loadEvents(start, end);
    }

});
nav.init();

const calendar = new DayPilot.Calendar("calendar", {
    viewType: "Week",
    locale: "es-mx",
    timeRangeSelectedHandling: "Disabled",
    eventMoveHandling: "Disabled",
    eventResizeHandling: "Disabled",
    eventArrangement: "SideBySide",
    onBeforeEventRender: (args) => {
        switch (args.data.status) {
          case "Libre":
            args.data.backColor = "#3d85c6";  // blue
            args.data.barHidden = true;
            args.data.borderColor = "darker";
            args.data.fontColor = "white";
            args.data.html = ``;
            break;
          case "En espera":
            args.data.backColor = "#e69138";  // orange
            args.data.barHidden = true;
            args.data.borderColor = "darker";
            args.data.fontColor = "white";
            args.data.html = ``;
            break;
          case "Confirmada":
            args.data.backColor = "#6aa84f";  // green
            args.data.barHidden = true;
            args.data.borderColor = "darker";
            args.data.fontColor = "white";
            args.data.html = ``;
            break;
        }
    },
    onEventClick: async (args) => {
        if (args.e.data.status !== "Libre") {
          calendar.message("La hora seleccionada no está disponible");
          return;
        }

        const form = [
          {name: "Solicitar una cita"},
          {name: "Inicio", id: "start", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true},
                { name: "Fin", id: "end", dateFormat: "dd/MM/yyyy h:mm tt", disabled: true },
          {name: "Nombre completo", id: "name", disabled: true},
        ];

        const data = {
          id: args.e.id(),
          start: args.e.start(),
          end: args.e.end(),
          patient: app.patientId,
          name: '@Context.Session.GetString("nombre_completo") @Context.Session.GetString("apellido_completo")'
        };

        const options = {
          focus: "name"
        };

        const modal = await DayPilot.Modal.form(form, data, options);
        if (modal.canceled) {
          return;
        }

            await DayPilot.Http.put(`https://localhost:7270/Citas/${data.id}/request`, modal.result);

        args.e.data.status = "En espera";
        calendar.events.update(args.e.data);

    }
});

//HORAS MOSTRADAS EN EL CALENDARIO
calendar.dayBeginsHour = 7;
calendar.dayEndsHour = 21;

    calendar.bubble = new DayPilot.Bubble({

        onLoad: function (args) {
            
            var ev = args.source;

            args.async = true;

            setTimeout(function () {

                switch (ev.data.status) {
                    case "Libre":
                        args.html = `Disponible<br/>${ev.data.doctorName}<br/>${ev.data.empleado.departamento.nombre}`;
                        break;
                    case "En espera":
                        args.html = `Cita por confirmar<br/>${ev.data.doctorName}<br/>${ev.data.empleado.departamento.nombre}`;
                        break;
                    case "Confirmada":
                        args.html = `Cita confirmada<br/>${ev.data.doctorName}<br/>${ev.data.empleado.departamento.nombre}`;
                        break;
                }

                args.loaded();

            });

        }

    });

calendar.heightSpec = 'Parent100Pct';

calendar.init();

app.init();

</script>